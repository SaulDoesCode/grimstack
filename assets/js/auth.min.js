import app from"/js/site.min.js";const d=app.d,df=d.domfn,authLauncher=d.query(".auth-launcher"),{authView:authView,usernameInput:usernameInput,emailInput:emailInput,authBtn:authBtn}=d.h`
<section class="auth-view" ref="authView">
  <div>
    <div class="auth-form-field">
      <label for="auth-username">Username</label>
      <input type="text" name="username" id="auth-username" ref="usernameInput">
      <label for="auth-email">Email</label>
      <input type="text" name="email" id="auth-email" ref="emailInput">
    </div>
    <button class="submit" ref="authBtn">authenticate</button>
  </div>
</section>`.collect();app.authViewToggle=app.setupToggleSituation(authLauncher,app.authView=authView),app.authenticate=async(t=usernameInput.value.trim(),a=emailInput.value.trim())=>{if(""==t)throw new Error("username is invalid");if(""==a||!a.includes("@"))throw new Error("email is invalid");console.log("attempting authentication...");const e=await app.jsonPost("/auth",{username:t,email:a}),i=await e.json();if(console.log(i),i.ok){app.toast.msg("auth went through: "+i.status);try{await app.try_auth_verify()}catch(t){}return!0}throw app.toast.error("auth failed: "+i.status),new Error("authentication failed: "+i.status)},app.try_auth_verify=()=>new Promise((t,a)=>{let e=!0,i=setTimeout(()=>{e=!1,clearInterval(n),a()},6e5),n=setInterval(async()=>{if(!e)return clearInterval(n),clearTimeout(i),void a();const u=await(await fetch("/auth/verification")).json();u.ok&&(app.toast.msg("Auth: "+u.status),clearInterval(n),clearTimeout(i),t(),setTimeout(()=>{window.location.reload()},3e3))},1500)});const authClickHandle=d.once.click(authBtn,async t=>{try{await app.authenticate()}catch(t){console.error(t),authClickHandle.on()}});app.authViewToggle.toggleView();
//# sourceMappingURL=auth.min.js.map