import app from"/js/site.min.js";import route from"/js/router.min.js";const d=app.d,df=d.domfn,{div:div,h4:h4,section:section,span:span,header:header}=df,mainView=d.query("main[route-active]"),contentDisplay=df.section({class:"posts"}),postDisplay=df.section({class:"full post"},t=>{t.parts=d.h`
        <header class="post-header">
            <div>
                <h3 class="post-title" ref="title"></h3>
                <div class="author-name" ref="author"></div>
            </div>
            <div>
                <div class="posted" ref="date"></div>
                <div class="tags" ref="tags"></div>
            </div>
        </header>
    
        <article class="content" ref="content">
        </article>

        <aside class="post-comments" hidden ref="commentContainer">
            <header>Comments</header>
            <div ref="commentMaker"></div>
            <div ref="comments"></div>
        </aside>
    `.renderCollect(t)});route("posts",contentDisplay),""!=location.hash&&"#"!=location.hash||(location.hash="posts"),route("post",postDisplay),d.run(async()=>{try{await app.loadScriptsThenRunSequentially(!0,"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.36/dayjs.min.js","https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.36/plugin/utc.min.js","https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.36/plugin/relativeTime.min.js"),window.dayjs.extend(window.dayjs_plugin_utc),window.dayjs.extend(window.dayjs_plugin_relativeTime),dayjs().utcOffset(2),app.emit("dayjsLoaded",app.dayjsLoaded=!0)}catch(t){}});const postNavView=d.html('\n    <nav class="post-nav">\n        <button class="post-back-btn" onclick="location.hash = app.fancyHash || \'posts\'">\n           ðŸ¡„ Back to Post List\n        </button>\n    </nav>\n');route.on.post(async t=>{await app.afterPostsInitialization();const e=app.activePost=app.posts[t],{title:a,tags:s,author:o,date:n,content:i,comments:p,commentsContainer:c}=postDisplay.parts;a.textContent=e.title,n.innerHTML="",d.render(app.renderUXTimestamp(e.posted),n),s.innerHTML="",e.tags.map(t=>df.span({$:s,class:"tag"},t)),o.textContent="By "+e.author_name,i.innerHTML="Content loading...",df.prepend(mainView,postNavView);const r=await app.fetchPostContent(e.id);i.innerHTML="",e==app.activePost&&(d.render(d.html(r),i),setTimeout(()=>d.queryAll(".content code",i).forEach(t=>{t.classList.add("language-rust")}),60))}),app.view={page:0};const publicPost=t=>div({$:contentDisplay,class:"post",attr:{pid:t.id},onclick(e,a){e.target.className.includes("vote")||(location.hash=t.id,app.fetchPostContent(t.id))}},div({class:"votes",async onclick(e,a){const s=e.target.classList.contains("up"),o=e.target.classList.contains("down");if(!o&&!s)return;e.target.classList.add("await-vote");const n=e.target.classList.contains("selected");if(null!=t.you_voted&&n){const s=await app.voteWrit(t.id);0!=s&&(a.downvote.classList.remove("selected"),a.upvote.classList.remove("selected"),e.target.classList.remove("await-vote"),a.voteCount.textContent=t.vote=s.data,t.you_voted=null)}else if(s){const s=await app.voteWrit(t.id,!0);0!=s&&(a.downvote.classList.remove("selected"),a.upvote.classList.add("selected"),e.target.classList.remove("await-vote"),a.voteCount.textContent=t.vote=s.data,t.you_voted=!0)}else if(o){const s=await app.voteWrit(t.id,!1);0!=s&&(a.upvote.classList.remove("selected"),a.downvote.classList.add("selected"),e.target.classList.remove("await-vote"),a.voteCount.textContent=t.vote=s.data,t.you_voted=!1)}}},e=>[e.upvote=span({class:{up:!0,vote:!0,selected:!0===t.you_voted}}),e.voteCount=span({class:"vote-count"},t.vote),e.downvote=span({class:{down:!0,vote:!0,selected:!1===t.you_voted}})]),header(div({class:"title"},h4(t.title),div({class:"author-name"},"By "+t.author_name)),div(div({class:"posted"},app.renderUXTimestamp(t.posted)),div({class:"tags"},t.tags.map(t=>span({class:"tag"},t))))));app.fetchPostContent=async t=>{if(app.posts[t]&&null!=app.posts[t].content)return app.posts[t].content;const e=await fetch("/post-content/"+t),a=await e.json();if(a.ok)return app.posts[t].content=a.data;throw new Error(a.status)},app.posts=Object.create(null),app.writQuery({with_content:!1,kind:"post"}).then(async t=>{if(!d.isArr(t))return console.error(t);t.forEach(t=>{app.posts[t.id]=t,publicPost(t)}),app.postsInitialized=!0,app.emit.postsInitialized(),app.loadStyle("https://cdnjs.cloudflare.com/ajax/libs/prism/1.21.0/themes/prism-tomorrow.min.css",!0)}),app.afterPostsInitialization=t=>app.postsInitialized?null!=t?t():Promise.resolve(!0):null!=t?app.once.postsInitialized(t):new Promise(t=>app.once.postsInitialized(t)),app.dateFormat="HH:mm a DD MMM YYYY",app.dayjsUXTSformat=t=>{const e=dayjs.unix(t).utcOffset(2);return e.format(app.dateFormat)+" | "+e.fromNow()},app.renderUXTimestamp=t=>{const e=d.txt();try{e.textContent=app.dayjsUXTSformat(t)}catch(a){e.textContent=new Date(1e3*t).toLocaleString(),app.once.dayjsLoaded(()=>e.textContent=app.dayjsUXTSformat(t))}return e},app.voteWrit=async(t,e)=>{try{const a=await fetch(`/writ/${t}/${null==e?"unvote":e?"upvote":"downvote"}`);return await a.json()}catch(t){console.error("app.voteWrit error: ",t)}return!1};
//# sourceMappingURL=view.min.js.map