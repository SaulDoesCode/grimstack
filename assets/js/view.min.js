import app from"/js/site.min.js";import route from"/js/router.min.js";const d=app.d,df=d.domfn,{div:div,h4:h4,section:section,span:span,header:header}=df,mainView=d.query("main[route-active]"),contentDisplay=df.section({class:"posts"}),postDisplay=df.section({class:"post"},t=>{t.parts=d.h`
        <header class="post-header">
            <div>
                <h3 class="post-title" ref="title"></h3>
                <div class="author-name" ref="author"></div>
            </div>
            <div>
                <div class="posted" ref="date"></div>
                <div class="tags" ref="tags"></div>
            </div>
        </header>
    
        <article class="content" ref="content">
        </article>

        <aside class="post-comments" hidden ref="commentContainer">
            <header>Comments</header>
            <div ref="commentMaker"></div>
            <div ref="comments"></div>
        </aside>
    `.renderCollect(t)});route("posts",contentDisplay),""!=location.hash&&"#"!=location.hash||(location.hash="posts"),route("post",postDisplay),d.run(async()=>{try{await app.loadScriptsThenRunSequentially(!0,"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.36/dayjs.min.js","https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.36/plugin/utc.min.js","https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.36/plugin/relativeTime.min.js"),window.dayjs.extend(window.dayjs_plugin_utc),window.dayjs.extend(window.dayjs_plugin_relativeTime),dayjs().utcOffset(2),app.emit("dayjsLoaded",app.dayjsLoaded=!0)}catch(t){}});const postNavView=d.html('\n    <nav class="post-nav">\n        <button class="post-back-btn" onclick="location.hash = app.fancyHash || \'posts\'">\n            <- Go back to post list\n        </button>\n    </nav>\n');route.on.post(t=>app.afterPostsInitialization(async()=>{const a=app.activePost=app.posts[t],{title:s,tags:e,author:n,date:o,content:i,comments:p,commentsContainer:r}=postDisplay.parts;s.textContent=a.title,o.innerHTML="",d.render(app.renderUXTimestamp(a.posted),o),e.innerHTML="",a.tags.map(t=>df.span({$:e,class:"tag"},t)),n.textContent="By "+a.author_name,i.innerHTML="Content loading...",app.fetchPostContent(a.id).then(t=>{i.innerHTML="",a==app.activePost&&(d.render(d.html(t),i),setTimeout(()=>{d.queryAll(".content code",i).forEach(t=>{t.classList.add("language-rust")})},60))}),df.prepend(mainView,postNavView)})),app.view={page:0};const publicPost=t=>div({$:contentDisplay,class:"post",attr:{pid:t.id},onclick(a,s){location.hash=t.id,app.fetchPostContent(t.id)}},header(div(h4(t.title),div({class:"author-name"},"By "+t.author_name)),div(div({class:"posted"},app.renderUXTimestamp(t.posted)),div({class:"tags"},t.tags.map(t=>span({class:"tag"},t))))));app.fetchPostContent=async t=>{if(app.posts[t]&&null!=app.posts[t].content)return app.posts[t].content;const a=await fetch("/post-content/"+t),s=await a.json();if(s.ok)return app.posts[t].content=s.data;throw new Error(s.status)},app.posts=Object.create(null),app.writQuery({with_content:!1,kind:"post"}).then(async t=>{if(!d.isArr(t))return console.error(t);t.forEach(t=>{app.posts[t.id]=t,publicPost(t)}),app.postsInitialized=!0,app.emit.postsInitialized(),app.loadStyle("https://cdnjs.cloudflare.com/ajax/libs/prism/1.21.0/themes/prism-tomorrow.min.css",!0)}),app.afterPostsInitialization=t=>{app.postsInitialized?t():app.once.postsInitialized(t)},app.dateFormat="HH:mm a DD MMM YYYY",app.dayjsUXTSformat=t=>{const a=dayjs.unix(t).utcOffset(2);return a.format(app.dateFormat)+" | "+a.fromNow()},app.renderUXTimestamp=t=>{const a=d.txt();try{a.textContent=app.dayjsUXTSformat(t)}catch(s){a.textContent=new Date(1e3*t).toLocaleString(),app.once.dayjsLoaded(()=>a.textContent=app.dayjsUXTSformat(t))}return a};
//# sourceMappingURL=view.min.js.map