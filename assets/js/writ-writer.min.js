import app from"/js/site.min.js";const d=app.d,df=d.domfn,{div:div,span:span}=df,wwLauncher=d.query(".ww-launcher"),{wwView:wwView,titleInput:titleInput,writingPad:writingPad,tagInput:tagInput,pushWritBtn:pushWritBtn,saveLocallyBtn:saveLocallyBtn,clearEditorBtn:clearEditorBtn,writSelector:writSelector,isPublicCheckbox:isPublicCheckbox,isCommentableCheckbox:isCommentableCheckbox,writList:writList}=d.h`
<article class="writ-writer-view" ref="wwView">
    <section class="writer">
        <div>
            <input type="text" name="post-title" title="writ title" id="title-input" placeholder="writ title" autocomplete="off" ref="titleInput">
        </div>
        <div class="writing-pad-container">
            <textarea class="writing-pad" ref="writingPad" title="writ content" spellcheck="true" minlength="10" required placeholder="content of your writ (it can be markdown)"></textarea>
        </div>
        <div class="tags-and-toggles">
            <input type="text" name="tags" title="tag input" id="tag-input" placeholder="comma, separated, tags" autocomplete="off" ref="tagInput">
            <div>
                <label for="is-public">public</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="public" id="is-public" ref="isPublicCheckbox" checked>
                    <span></span>
                </div>
            </div>
            <div>
                <label for="is-commentable">commentable</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="commentable" id="is-commentable" ref="isCommentableCheckbox" checked>
                    <span></span>
                </div>
            </div>
        </div>
        <section class="ribbon">
            <button class="submit" ref="pushWritBtn">Push</button>
            <button class="submit" ref="saveLocallyBtn">Save locally</button>
            <button class="submit" ref="clearEditorBtn">Clear Editor</button>
        </section>
    </section>
    <aside class="writ-selector" ref="writSelector">
        <header>Your Writs</header>
        <section class="writ-list" ref="writList"></section>
    </aside>
</article>`.collect();writingPad.value="",(app.wwTS=app.setupToggleSituation(wwLauncher,wwView,"body",{viewOutAnimation:"fade-out 220ms ease-out",delayRemoveMS:220})).toggleView();const writListEntry=(t,e)=>div({class:{"wl-entry":!0,unpushed:null==e},$:writList,attr:{wid:null==e?t:e}},a=>[a.titleSpan=span(t),div(()=>{const i=span({class:"delete-writ",attr:{title:"Double click/tap to delete writ"}},"ðŸ—‘");let l,s=0;const r=d.on.pointerup(i,async n=>{if(clearTimeout(l),2!=++s)return 1==s&&i.classList.add("prep"),void(l=setTimeout(()=>{i.classList.remove("prep"),s=0},900));s=0;try{if(r.off(),null!=e){(await app.deleteWritRequest(e)).ok&&(df.remove(a),app.ww.active&&app.ww.active.id==e&&app.clearEditor(),delete app.ww.writs[e])}else await localforage.removeItem("unpushed:"+t),delete app.ww.unpushed[t],df.remove(a),app.ww.active&&app.ww.active.title==t&&app.clearEditor()}catch(n){r.on(),console.error("Well, that didn't work: "+n)}});return i})]);app.ww={writs:{},unpushed:{}},app.pushWrit=async(t,e,a,i={})=>{const l={title:t,raw_content:e.trim(),tags:a,kind:"post",public:!0,viewable_by:[],...i},s=await app.jsonPut("/writ",l),r=await s.json();return r.ok?Promise.resolve(r.data):Promise.reject(r)},app.deleteWritRequest=t=>app.txtDelete("/writ",t),app.reloadWrits=()=>{},app.editableWritQuery({author_name:app.user.username,with_raw_content:!1}).then(async t=>{if(!d.isArr(t))return console.error("failed to fetch user's editable writs");for(const e of t)app.ww.writs[e.id]=e,writListEntry(e.title,e.id);for(const t of await(await app.localForage()).keys())if(t.includes("unpushed:")){const e=JSON.parse(await localforage.getItem(t));app.ww.unpushed[e.title]=e,writListEntry(e.title)}}),app.rawContentRequest=async t=>{const e=await fetch("/writ-raw-content/"+t);return await e.json()},app.localForage=()=>app.localForageLoaded?Promise.resolve(window.localforage):new Promise(t=>app.once.localForageLoaded(()=>t(window.localforage))),d.run(async()=>{await app.loadScriptsThenRunSequentially(!0,"/js/localforage.min.js"),app.emit("localForageLoaded",app.localForageLoaded=!0)}),d.on.pointerup(writList,t=>{if(t.target.classList.contains("selected")||t.target.parentElement.classList.contains("selected"))return;let e=t.target.getAttribute("wid")||t.target.parentElement.getAttribute("wid");if(null!=e){const t=app.ww.active=app.ww.writs[e]||app.ww.unpushed[e];null==app.ww.writs[e]?pushWritBtn.after(saveLocallyBtn):df.remove(saveLocallyBtn),app.ww.selectedWLE&&app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=d.query(`[wid="${e}"]`),app.ww.selectedWLE.classList.add("selected");let a=null==t.raw_content;null==t.raw_content&&app.rawContentRequest(t.id).then(e=>{e.ok||(writingPad.value="Ok, so loading failed for some reason, you should reload or something, it's probably a client side error, or less likely, a database issue - "+(e.status||"")),writingPad.value=t.raw_content=e.data,a=!1}),titleInput.value=t.title,writingPad.value=t.raw_content||"Hang tight, the content is loading...",setTimeout(()=>{if(a){let e=0;const i="Hang tight, the content is loading";let l=setInterval(()=>{if(a){let t="";d.each(e++,()=>t+="."),writingPad.value=i+t,4==e&&(e=0)}else clearInterval(l),e=0,writingPad.value=t.raw_content},220)}},220),tagInput.value=t.tags.join(", "),isPublicCheckbox.checked=t.commentable,isCommentableCheckbox.checked=t.public,pushWritBtn.textContent="Update"}}),app.clearEditor=()=>{app.ww.active&&(app.ww.active=null),titleInput.value=writingPad.value=tagInput.value="",isPublicCheckbox.checked=isCommentableCheckbox.checked=!0,app.ww.selectedWLE&&(app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=null,pushWritBtn.textContent="Push"),pushWritBtn.after(saveLocallyBtn)},app.gatherWritFromWriter=()=>{const t=titleInput.value.trim(),e=writingPad.value.trim(),a=isPublicCheckbox.checked,i=isCommentableCheckbox.checked;return{title:t,raw_content:e,tags:tagInput.value.split(",").map(t=>t.trim()),ops:{is_md:!0,public:a,commentable:i}}},app.editorPushWrit=async()=>{let t;console.log("trying to push writ...");const e=app.gatherWritFromWriter();return app.ww.active&&(e.ops.id=app.ww.active.id),t=await app.pushWrit(e.title,e.raw_content,e.tags,e.ops),t&&null!=t.title&&app.toast.msg("success, writ posted: "+t.title),t},d.on.pointerup(saveLocallyBtn,async t=>{if(app.ww.active&&null!=app.ww.active.id)return;const{title:e,raw_content:a,tags:i,ops:l}=app.gatherWritFromWriter(),s={title:e,raw_content:a,tags:i,...l};await localforage.setItem("unpushed:"+e,JSON.stringify(s)),app.ww.active=app.ww.unpushed[e]=s,app.ww.selectedWLE&&app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=writListEntry(e),app.ww.selectedWLE.classList.add("selected")}),d.on.pointerup(clearEditorBtn,app.clearEditor),d.on.pointerup(pushWritBtn,t=>{app.editorPushWrit()}),d.on.input(titleInput,t=>{app.ww.active&&app.ww.selectedWLE&&(app.ww.selectedWLE.titleSpan.textContent=titleInput.value)});
//# sourceMappingURL=writ-writer.min.js.map