import app from"/js/site.min.js";const d=app.d,df=d.domfn,wwLauncher=d.query(".ww-launcher"),{wwView:wwView,titleInput:titleInput,writingPad:writingPad,tagInput:tagInput,pushWritBtn:pushWritBtn,deleteWritBtn:deleteWritBtn,writSelector:writSelector,isPublicCheckbox:isPublicCheckbox,writList:writList}=d.h`
<article class="writ-writer-view" ref="wwView">
    <section class="writer">
        <div>
            <input type="text" name="post-title" title="writ title" id="title-input" placeholder="writ title" autocomplete="off" ref="titleInput">
        </div>
        <div>
            <textarea class="writing-pad" ref="writingPad" title="writ content" spellcheck="true" wrap="off" minlength="10" required placeholder="content of your writ (it can be markdown)"></textarea>
        </div>
        <div class="tags-and-toggles">
            <input type="text" name="tags" title="tag input" id="tag-input" placeholder="comma, separated, tags" autocomplete="off" ref="tagInput">
            <div>
                <label for="is-public">public</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="public" id="is-public" ref="isPublicCheckbox" checked>
                    <span></span>
                </div>
            </div>
            <div>
                <label for="is-commentable">commentable</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="commentable" id="is-commentable" ref="isCommentableCheckbox" checked>
                    <span></span>
                </div>
            </div>
        </div>
        <section class="ribbon">
            <button class="submit" ref="pushWritBtn">Push</button>
            <button class="submit" ref="deleteWritBtn">Delete</button>
        </section>
    </section>
    <aside class="writ-selector" ref="writSelector">
        <header>Writs</header>
        <section class="writ-list" ref="writList"></section>
    </aside>
</article>`.collect();writingPad.value="",(app.wwTS=app.setupToggleSituation(wwLauncher,wwView,"body",{viewOutAnimation:"fade-out 220ms ease-out",delayRemoveMS:220})).toggleView();const writListEntry=(t,e)=>d("div",{class:"wl-entry",$:writList,attr:{wid:e}},d("span",t));app.user.writs={},app.ww={},app.pushWrit=async(t,e,i,a={})=>{const s={title:t,raw_content:e.trim(),tags:i,kind:"post",public:!0,viewable_by:[]};Object.assign(s,a);const r=await jsonPut("/writ",s),l=await r.json();return l.ok?Promise.resolve(l.data):Promise.reject(l)},app.editableWritQuery({author_name:app.user.username,with_raw_content:!0}).then(async t=>{console.log(t),d.isArr(t)||console.error("failed to fetch user's editable writs"),t.forEach(t=>{var e,i;app.user.writs[t.id]=t,e=t.title,i=t.id,d("div",{class:"wl-entry",$:writList,attr:{wid:i}},d("span",e))})}),d.on.click(writList,t=>{if(t.target.classList.contains("selected"))return;let e=t.target.getAttribute("wid")||t.target.parentElement.getAttribute("wid");if(null!=e){const t=app.user.writs[e];app.ww.selectedWLE&&app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=d.query(`[wid="${e}"]`),app.ww.selectedWLE.classList.add("selected"),titleInput.value=t.title,writingPad.value=t.raw_content,tagInput.value=t.tags.join(", "),console.log("got one:",t)}});