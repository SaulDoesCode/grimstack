import app from"/js/site.min.js";const d=app.d,df=d.domfn,{div:div,span:span}=df,wwLauncher=d.query(".ww-launcher"),{wwView:wwView,titleInput:titleInput,writingPad:writingPad,tagInput:tagInput,pushWritBtn:pushWritBtn,clearEditorBtn:clearEditorBtn,writSelector:writSelector,isPublicCheckbox:isPublicCheckbox,isCommentableCheckbox:isCommentableCheckbox,writList:writList}=d.h`
<article class="writ-writer-view" ref="wwView">
    <section class="writer">
        <div>
            <input type="text" name="post-title" title="writ title" id="title-input" placeholder="writ title" autocomplete="off" ref="titleInput">
        </div>
        <div>
            <textarea class="writing-pad" ref="writingPad" title="writ content" spellcheck="true" wrap="off" minlength="10" required placeholder="content of your writ (it can be markdown)"></textarea>
        </div>
        <div class="tags-and-toggles">
            <input type="text" name="tags" title="tag input" id="tag-input" placeholder="comma, separated, tags" autocomplete="off" ref="tagInput">
            <div>
                <label for="is-public">public</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="public" id="is-public" ref="isPublicCheckbox" checked>
                    <span></span>
                </div>
            </div>
            <div>
                <label for="is-commentable">commentable</label>
                <div class="togglebox"> 
                    <input type="checkbox" name="commentable" id="is-commentable" ref="isCommentableCheckbox" checked>
                    <span></span>
                </div>
            </div>
        </div>
        <section class="ribbon">
            <button class="submit" ref="pushWritBtn">Push</button>
            <button class="submit" ref="clearEditorBtn">Clear Editor</button>
        </section>
    </section>
    <aside class="writ-selector" ref="writSelector">
        <header>Writs</header>
        <section class="writ-list" ref="writList"></section>
    </aside>
</article>`.collect();writingPad.value="",(app.wwTS=app.setupToggleSituation(wwLauncher,wwView,"body",{viewOutAnimation:"fade-out 220ms ease-out",delayRemoveMS:220})).toggleView();const writListEntry=(t,e)=>div({class:"wl-entry",$:writList,attr:{wid:e}},span(t),div(span({class:"delete-writ",once:{async pointerup(){try{(await app.deleteWrit(app.ww.writs[e])).ok&&(df.remove(d.query(`[wid="${e}"]`)),app.ww.active&&app.ww.active.id==e&&app.clearEditor(),delete app.ww[e])}catch(t){console.error("Well, that didn't work: "+t)}}}},"Del")));app.ww={writs:{}},app.pushWrit=async(t,e,i,a={})=>{const n={title:t,raw_content:e.trim(),tags:i,kind:"post",public:!0,viewable_by:[],...a},r=await app.jsonPut("/writ",n),l=await r.json();return l.ok?Promise.resolve(l.data):Promise.reject(l)},app.deleteWrit=t=>app.jsonDelete("/writ",t),app.editableWritQuery({author_name:app.user.username,with_raw_content:!1}).then(async t=>{d.isArr(t)||console.error("failed to fetch user's editable writs"),console.log(t);for(const e of t)app.ww.writs[e.id]=e,writListEntry(e.title,e.id)}),app.rawContentRequest=async t=>{const e=await fetch("/writ-raw-content/"+t);return await e.json()},d.on.pointerup(writList,t=>{if(t.target.classList.contains("selected")||t.target.parentElement.classList.contains("selected"))return;let e=t.target.getAttribute("wid")||t.target.parentElement.getAttribute("wid");if(null!=e){const t=app.ww.active=app.ww.writs[e];app.ww.selectedWLE&&app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=d.query(`[wid="${e}"]`),app.ww.selectedWLE.classList.add("selected");let i=null==t.raw_content;null==t.raw_content&&app.rawContentRequest(t.id).then(e=>{e.ok||(writingPad.value="Ok, so loading failed for some reason, you should reload or something, it's probably a client side error, or less likely, a database issue - "+(e.status||"")),writingPad.value=t.raw_content=e.data,i=!1}),titleInput.value=t.title,writingPad.value=t.raw_content||"Hang tight, the content is loading...",setTimeout(()=>{if(i){let e=0;const a="Hang tight, the content is loading";let n=setInterval(()=>{if(i){let t="";d.each(e++,()=>t+="."),writingPad.value=a+t,4==e&&(e=0)}else clearInterval(n),e=0,writingPad.value=t.raw_content},220)}},220),tagInput.value=t.tags.join(", "),isPublicCheckbox.checked=t.commentable,isCommentableCheckbox.checked=t.public,pushWritBtn.textContent="Update"}}),app.clearEditor=()=>{app.ww.active&&(app.ww.active=null),titleInput.value=writingPad.value=tagInput.value="",isPublicCheckbox.checked=isCommentableCheckbox.checked=!0,app.ww.selectedWLE&&(app.ww.selectedWLE.classList.remove("selected"),app.ww.selectedWLE=null,pushWritBtn.textContent="Push")},app.editorPushWrit=async()=>{let t;console.log("trying to push writ...");const e=titleInput.value.trim(),i=writingPad.value.trim(),a=isPublicCheckbox.checked,n=isCommentableCheckbox.checked,r=tagInput.value.split(",").map(t=>t.trim()),l={is_md:!0,public:a,commentable:n};if(app.ww.active&&(l.id=app.ww.active.id),t=await app.pushWrit(e,i,r,l),null!=t&&t.ok)return console.log(t),t},d.on.pointerup(clearEditorBtn,app.clearEditor),d.on.pointerup(pushWritBtn,t=>{app.editorPushWrit()});