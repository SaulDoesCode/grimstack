const app={initDropdown:e=>{let o;e.isDropdownOpen=()=>e.classList.contains("open"),app.whenHoveringOver(e,o=>{e.isDropdownOpen()||e.toggleDropdown(!0)}),e.toggleDropdown=(n=!e.isDropdownOpen())=>n?(app.openDropdown&&app.openDropdown.toggleDropdown(!1),app.openDropdown=e,e.classList.add("open"),e.clickawayHandle.on(),o=app.whenNotHoveringOver(e,o=>{clearTimeout(e.closeTimeout),e.closeTimeout=setTimeout(()=>{e.isDropdownOpen()&&(e.toggleDropdown(!1),o.off())},1500),app.whenHoveringOver(e,n=>{clearTimeout(e.closeTimeout),n.off(),o.on()})}),e):(e.classList.remove("open"),e.clickawayHandle.off(),o&&o.off(),app.openDropdown=null,e),e.clickawayHandle=domlib.on.click(document.body,o=>{o.target==e||e.contains(o.target)||e.toggleDropdown(!1)}).off()},NotHoveringOverHandlers:[],HoveringOverHandlers:[],whenNotHoveringOver:(e,o)=>{o.el=e;const n=domlib.on.pointerleave(e,e=>{o.notified||(o.notified=!0,o(o))}).off();return o.off=()=>(o.isOn&&(o.isOn=!1,app.NotHoveringOverHandlers.splice(o.i,1),n.off()),o),o.on=()=>(o.isOn||(o.isOn=!0,o.i=app.NotHoveringOverHandlers.push(o)-1,n.on()),o),o.on()},whenHoveringOver:(e,o)=>(o.el=e,o.off=()=>(app.HoveringOverHandlers.splice(o.i,1),o.isOn=!1,o),o.on=()=>(o.isOn||(o.isOn=!0,o.i=app.HoveringOverHandlers.push(o)-1),o),o.on()),isHoveringOver:e=>app.hoveringOn.includes(e),hoverElementChanged:e=>{for(const e of app.NotHoveringOverHandlers)app.isHoveringOver(e.el)?e.notified=!1:e.notified||(e.notified=!0,e(e));for(const e of app.HoveringOverHandlers)app.isHoveringOver(e.el)?e.notified||(e.notified=!0,e(e)):e.notified=!1}};domlib.run(()=>{app.compareHoverPath=e=>{app.lastHoveringOn?e.path[0]!=app.lastHoveringOn[0]&&(app.lastHoveringOn=app.hoveringOn,app.hoverElementChanged(app.hoveringOn=e.path)):app.hoverElementChanged(app.lastHoveringOn=app.hoveringOn=e.path)},document.body.addEventListener("pointerover",app.compareHoverPath,{passive:!0}),document.body.addEventListener("pointerenter",app.compareHoverPath,{passive:!0}),(app.dropdowns=[...document.querySelectorAll(".dropdown")]).forEach(app.initDropdown)}),app.writs=[];const jsonPost=app.jsonPost=(e,o)=>fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}),jsonPut=app.jsonPut=(e,o)=>fetch(e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});app.writQuery=(e={})=>new Promise((o,n)=>{isNaN(e.page)&&(e.page=1),e.kind||(e.kind="post"),jsonPost("/writs",e).then(e=>e.json().then(o))}),app.pushWrit=(e,o,n=["musings"],t={})=>new Promise((i,p)=>{const a={title:e,raw_content:o.trim(),tags:n,kind:"post",public:!0,viewable_by:[]};Object.assign(a,t),jsonPut("/writ",a).then(e=>e.json()).then(e=>e.ok?i(e.data):p(e))}),app.wq=(e=1)=>fetch("/writs",{method:"POST",headers:{"Content-Type":"application/json"},body:`{"page":${e},"kind":"post"}`});const pw=()=>app.pushWrit("Second Writ","\n** ain't this some shiiit.. **    \nfirst writ of many that came before\n".trim(),["testing","development"]),putComment=({parent_id:e="post:0:0",writ_id:o="post:0:0",raw_content:n="This is a comment, and it's even unique nogal, see: "+Math.round(100*Math.random())+Math.round(100*Math.random())+".",author_only:t=!1}={})=>new Promise((i,p)=>{jsonPut("/comment",{parent_id:e,writ_id:o,raw_content:n,author_only:t}).then(e=>{e.ok&&e.json().then(i).catch(e=>{p(new Error("no good, the json was invalid"))})}).catch(e=>{p(new Error("no good, it didn't work"))})}),getComments=async(e={},o)=>{null==e.path&&(e.path="post:0:0/"),null==e.page&&(e.page=1);const n=JSON.stringify(e);if("number"!=typeof o)return await fetch("/comments",{method:"POST",headers:{"Content-Type":"application/json"},body:n});for(let e=o;e-- >0;)await fetch("/comments",{method:"POST",headers:{"Content-Type":"application/json"},body:n})},commentRecursively=async(e,o,n=o)=>0==e--||commentRecursively(e,(await putComment({parent_id:o,writ_id:n})).data.id,n),defSetup=async(e=10,o)=>{const n=await app.pushWrit("Second Writ","\n** ain't this some shiiit.. **    \nfirst writ of many that came before\n".trim(),["testing","development"]),t=[];for(;e-- >0;)t.push(commentRecursively(9,n.id,n.id));await Promise.all(t),await getComments({path:n.id+"/"},o)};
//# sourceMappingURL=main.min.js.map