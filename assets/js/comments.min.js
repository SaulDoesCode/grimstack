import app from"/js/site.min.js";const d=app.d,df=d.domfn,{div:div,h4:h4,section:section,span:span,header:header}=df,{toggleBox:toggleBox}=app.components;app.fetchComments=async(t,e={})=>{null==e.path&&(e.path=t+"/"),null==e.page&&(e.page=1);try{const t=await app.jsonPost("/comments",e);return await t.json()}catch(t){return{ok:!1}}},app.makeComment=async(t,e,o=app.gatherComment())=>{if(null==o.public&&(o.public=!0),null==o.author_only&&(o.author_only=!1),null==t||t.length<2)throw new Error("app.makeComment: invalid parent id");if(null==e&&(e=t),e.length<2)throw new Error("app.makeComment: invalid writ id");if(null==o.raw_content||o.raw_content.length<2)throw new Error("app.makeComment: invalid comment content, it's either too long or too short");const a=await app.jsonPut("/comment",{parent_id:t,writ_id:e,public:o.public,raw_content:o.raw_content,author_only:o.author_only});return await a.json()};const commentsDisplay=section({$:app.postDisplay,class:"comments"},t=>[header(h4("Comments")),t.commentWriter=div({class:"comment-writer"},t.textarea=df.textarea({placeholder:"write a comment"}),div({class:"comment-controls"},div({class:"togglebox-container"},df.label({attr:{for:"author-only"}},"Author Only"),t.authorOnlyToggle=toggleBox("author-only",{id:"author-only",attr:{title:"check this to make your comment visible only to the post author and no one else"}})),t.cancelBtn=df.button({class:"cancel-btn",onclick(e){t.textarea.value="",t.authorOnlyToggle.input.checked&&(t.authorOnlyToggle.input.checked=!1)}},"Cancel"),t.postBtn=df.button({class:"post-btn"},"Post"))),t.list=div({class:"comment-list"})]);app.gatherComment=()=>{const{textarea:t,authorOnlyToggle:e}=commentsDisplay;return{raw_content:t.value.trim(),author_only:e.input.checked}};const commentPostHandler=d.once.click(commentsDisplay.postBtn,async t=>{try{const t=await app.makeComment(app.activePostDisplay.id);if(!t.ok)throw t.status||"very bad, comment post failed miserably";commentsDisplay.textarea.value="",commentsDisplay.authorOnlyToggle.input.checked&&(commentsDisplay.authorOnlyToggle.input.checked=!1),commentsDisplay.list.prepend(app.formulateThread(t.data))}catch(t){console.error(t)}finally{commentPostHandler.on()}});app.commentDateFormat=t=>"  "+dayjs.unix(t).utcOffset(2).fromNow(),app.on.postRendered(async t=>{if(app.activePostDisplay=t,app.postDisplay.classList.toggle("with-comments",t.commentable),!t.commentable)return void df.remove(commentsDisplay);commentsDisplay.list.innerHTML="",d.render(commentsDisplay,app.postDisplay);const e=await app.fetchComments(t.id);if(!e.ok)return;console.log(e);const o=e.data,a=[];for(const{comment:t,children:e}of o)a.push(app.formulateThread(t,e));d.render(a,commentsDisplay.list)}),app.formulateThread=(t,e)=>div({class:"comment"},header(span({class:"author-name"},t.author_name),span({class:"txt-divider"}," - "),span({class:"posted"},app.renderUXTimestamp(t.posted,app.commentDateFormat))),div({class:"content"},d.html(t.content)),null==e||e.length>0&&div({class:"children"},e.map(({cmnt:t,chrn:e})=>formulateComment(t,e))));
//# sourceMappingURL=comments.min.js.map